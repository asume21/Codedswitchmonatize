import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Code2, ArrowRight, Copy, Sparkles, RefreshCw } from "lucide-react";
import { InvokeLLM } from "@/integrations/Core";

const languages = [
  { value: 'javascript', label: 'JavaScript', color: 'bg-yellow-500' },
  { value: 'python', label: 'Python', color: 'bg-blue-500' },
  { value: 'java', label: 'Java', color: 'bg-red-500' },
  { value: 'cpp', label: 'C++', color: 'bg-purple-500' },
  { value: 'go', label: 'Go', color: 'bg-cyan-500' },
  { value: 'rust', label: 'Rust', color: 'bg-orange-500' },
  { value: 'php', label: 'PHP', color: 'bg-indigo-500' },
  { value: 'ruby', label: 'Ruby', color: 'bg-red-600' },
  { value: 'swift', label: 'Swift', color: 'bg-orange-600' },
  { value: 'kotlin', label: 'Kotlin', color: 'bg-purple-600' },
  { value: 'csharp', label: 'C#', color: 'bg-green-600' },
  { value: 'typescript', label: 'TypeScript', color: 'bg-blue-600' },
];

export default function CodeTranslator() {
  const [sourceLanguage, setSourceLanguage] = useState('javascript');
  const [targetLanguage, setTargetLanguage] = useState('python');
  const [sourceCode, setSourceCode] = useState('');
  const [translatedCode, setTranslatedCode] = useState('');
  const [explanation, setExplanation] = useState('');
  const [isTranslating, setIsTranslating] = useState(false);

  const handleTranslate = async () => {
    if (!sourceCode.trim()) return;

    setIsTranslating(true);
    try {
      const prompt = `
Translate this ${sourceLanguage} code to ${targetLanguage}:

\`\`\`${sourceLanguage}
${sourceCode}
\`\`\`

Please provide:
1. The translated code
2. A brief explanation of key differences and changes made
`;

      const response = await InvokeLLM({
        prompt,
        response_json_schema: {
          type: "object",
          properties: {
            translated_code: { type: "string" },
            explanation: { type: "string" }
          }
        }
      });

      setTranslatedCode(response.translated_code || 'Translation completed.');
      setExplanation(response.explanation || 'Code translated successfully.');
    } catch (error) {
      console.error('Translation failed:', error);
      setTranslatedCode('// Translation failed. Please try again.');
      setExplanation('An error occurred during translation.');
    }
    setIsTranslating(false);
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Code Translator</h1>
          <p className="text-slate-400">Convert between 14+ programming languages with AI</p>
        </div>
        <Badge variant="outline" className="border-indigo-500/30 text-indigo-300 bg-indigo-500/10">
          <Sparkles className="w-4 h-4 mr-2" />
          AI Powered
        </Badge>
      </div>

      {/* Language Selection */}
      <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
        <CardContent className="p-6">
          <div className="flex items-center gap-4">
            <div className="flex-1">
              <label className="text-sm font-medium text-slate-300 mb-2 block">From</label>
              <Select value={sourceLanguage} onValueChange={setSourceLanguage}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.value} value={lang.value}>
                      {lang.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <Button
              variant="outline"
              size="icon"
              onClick={() => {
                setSourceLanguage(targetLanguage);
                setTargetLanguage(sourceLanguage);
              }}
              className="mt-6 border-slate-600 hover:border-indigo-500"
            >
              <RefreshCw className="w-4 h-4" />
            </Button>

            <div className="flex-1">
              <label className="text-sm font-medium text-slate-300 mb-2 block">To</label>
              <Select value={targetLanguage} onValueChange={setTargetLanguage}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {languages.map((lang) => (
                    <SelectItem key={lang.value} value={lang.value}>
                      {lang.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <Button 
            onClick={handleTranslate} 
            disabled={isTranslating || !sourceCode.trim()}
            className="w-full mt-6 bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700"
          >
            {isTranslating ? (
              <>
                <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                Translating...
              </>
            ) : (
              <>
                <ArrowRight className="w-4 h-4 mr-2" />
                Translate Code
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Code Editors */}
      <div className="grid lg:grid-cols-2 gap-6">
        <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Source Code</CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              placeholder="Enter your source code here..."
              value={sourceCode}
              onChange={(e) => setSourceCode(e.target.value)}
              className="min-h-80 bg-slate-950 border-slate-600 text-slate-100 font-mono"
            />
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Translated Code</CardTitle>
          </CardHeader>
          <CardContent>
            <Textarea
              placeholder="Translated code will appear here..."
              value={translatedCode}
              readOnly
              className="min-h-80 bg-slate-950 border-slate-600 text-slate-100 font-mono"
            />
          </CardContent>
        </Card>
      </div>

      {explanation && (
        <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Explanation</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-slate-300">{explanation}</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}