import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Shield, AlertTriangle, CheckCircle, XCircle, Scan, Upload } from "lucide-react";
import { InvokeLLM } from "@/integrations/Core";

export default function SecurityScanner() {
  const [code, setCode] = useState('');
  const [scanResults, setScanResults] = useState(null);
  const [isScanning, setIsScanning] = useState(false);

  const handleScan = async () => {
    if (!code.trim()) return;

    setIsScanning(true);
    try {
      const response = await InvokeLLM({
        prompt: `
Analyze this code for security vulnerabilities and provide a detailed security report:

\`\`\`
${code}
\`\`\`

Please provide:
1. Overall security score (1-10)
2. List of vulnerabilities found with severity levels
3. Recommendations for fixing issues
4. Best practices suggestions
`,
        response_json_schema: {
          type: "object",
          properties: {
            security_score: { type: "number" },
            vulnerabilities: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  type: { type: "string" },
                  severity: { type: "string" },
                  description: { type: "string" },
                  line: { type: "number" }
                }
              }
            },
            recommendations: {
              type: "array",
              items: { type: "string" }
            }
          }
        }
      });

      setScanResults(response);
    } catch (error) {
      console.error('Scan failed:', error);
      setScanResults({
        security_score: 0,
        vulnerabilities: [{ type: 'Scan Error', severity: 'high', description: 'Failed to analyze code', line: 0 }],
        recommendations: ['Please try again with valid code']
      });
    }
    setIsScanning(false);
  };

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'border-red-500 text-red-400 bg-red-500/10';
      case 'high': return 'border-orange-500 text-orange-400 bg-orange-500/10';
      case 'medium': return 'border-yellow-500 text-yellow-400 bg-yellow-500/10';
      case 'low': return 'border-blue-500 text-blue-400 bg-blue-500/10';
      default: return 'border-slate-500 text-slate-400 bg-slate-500/10';
    }
  };

  const getScoreColor = (score) => {
    if (score >= 8) return 'text-green-400';
    if (score >= 6) return 'text-yellow-400';
    if (score >= 4) return 'text-orange-400';
    return 'text-red-400';
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Security Scanner</h1>
          <p className="text-slate-400">AI-powered vulnerability detection for your codebase</p>
        </div>
        <Badge variant="outline" className="border-green-500/30 text-green-400 bg-green-500/10">
          <Shield className="w-4 h-4 mr-2" />
          Enterprise Grade
        </Badge>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center justify-between">
              Code Input
              <Button variant="outline" size="sm" className="border-slate-600 hover:border-slate-500">
                <Upload className="w-4 h-4 mr-2" />
                Upload File
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Paste your code here for security analysis..."
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="min-h-80 bg-slate-950 border-slate-600 text-slate-100 font-mono"
            />
            <Button 
              onClick={handleScan}
              disabled={isScanning || !code.trim()}
              className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700"
            >
              {isScanning ? (
                <>
                  <Scan className="w-4 h-4 mr-2 animate-spin" />
                  Scanning for Vulnerabilities...
                </>
              ) : (
                <>
                  <Shield className="w-4 h-4 mr-2" />
                  Run Security Scan
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Scan Results</CardTitle>
          </CardHeader>
          <CardContent>
            {!scanResults ? (
              <div className="text-center py-12">
                <Shield className="w-16 h-16 text-slate-600 mx-auto mb-4" />
                <p className="text-slate-400">Run a scan to see security analysis results</p>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="text-center">
                  <div className="text-4xl font-bold mb-2">
                    <span className={getScoreColor(scanResults.security_score)}>
                      {scanResults.security_score}/10
                    </span>
                  </div>
                  <p className="text-slate-400">Security Score</p>
                </div>

                <div className="space-y-3">
                  <h3 className="text-lg font-semibold text-white">Vulnerabilities Found</h3>
                  {scanResults.vulnerabilities?.length > 0 ? (
                    scanResults.vulnerabilities.map((vuln, index) => (
                      <Alert key={index} className={`border ${getSeverityColor(vuln.severity)}`}>
                        <AlertTriangle className="h-4 w-4" />
                        <AlertDescription>
                          <div className="flex justify-between items-start">
                            <div>
                              <strong>{vuln.type}</strong>
                              <p className="text-sm mt-1">{vuln.description}</p>
                              {vuln.line > 0 && (
                                <p className="text-xs text-slate-500 mt-1">Line {vuln.line}</p>
                              )}
                            </div>
                            <Badge variant="outline" className={getSeverityColor(vuln.severity)}>
                              {vuln.severity}
                            </Badge>
                          </div>
                        </AlertDescription>
                      </Alert>
                    ))
                  ) : (
                    <Alert className="border-green-500 text-green-400 bg-green-500/10">
                      <CheckCircle className="h-4 w-4" />
                      <AlertDescription>
                        No vulnerabilities detected! Your code looks secure.
                      </AlertDescription>
                    </Alert>
                  )}
                </div>

                {scanResults.recommendations && (
                  <div className="space-y-3">
                    <h3 className="text-lg font-semibold text-white">Recommendations</h3>
                    <div className="space-y-2">
                      {scanResults.recommendations.map((rec, index) => (
                        <div key={index} className="flex items-start gap-2 text-sm text-slate-300">
                          <CheckCircle className="w-4 h-4 text-green-400 mt-0.5 flex-shrink-0" />
                          {rec}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-700">
        <CardHeader>
          <CardTitle className="text-white">Security Best Practices</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4">
            {[
              { title: 'Input Validation', desc: 'Always validate and sanitize user inputs' },
              { title: 'Authentication', desc: 'Implement strong authentication mechanisms' },
              { title: 'Data Encryption', desc: 'Encrypt sensitive data at rest and in transit' },
              { title: 'Access Control', desc: 'Apply principle of least privilege' },
              { title: 'Error Handling', desc: 'Handle errors gracefully without exposing internals' },
              { title: 'Regular Updates', desc: 'Keep dependencies and frameworks updated' }
            ].map((practice, index) => (
              <div key={index} className="p-4 bg-slate-800 rounded-lg border border-slate-700">
                <h4 className="font-semibold text-white mb-2">{practice.title}</h4>
                <p className="text-sm text-slate-400">{practice.desc}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}