import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Code2, Music, Shield, Zap, ArrowRight, GitBranch, Waves, MessageCircle } from 'lucide-react';
import { Waitlist } from '@/entities/Waitlist';
import { Toaster, toast } from 'sonner';

const FeatureCard = ({ icon, title, description }) => (
  <Card className="bg-slate-900/50 backdrop-blur-xl border-slate-800 h-full transform transition-transform duration-300 hover:-translate-y-2">
    <CardHeader className="flex flex-row items-center gap-4">
      <div className="w-12 h-12 bg-indigo-600/20 rounded-lg flex items-center justify-center">
        {React.createElement(icon, { className: "w-6 h-6 text-indigo-400" })}
      </div>
      <CardTitle className="text-white text-lg">{title}</CardTitle>
    </CardHeader>
    <CardContent>
      <p className="text-slate-400">{description}</p>
    </CardContent>
  </Card>
);

export default function Landing() {
  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleWaitlistSubmit = async (e) => {
    e.preventDefault();
    if (!email) {
      toast.error("Please enter a valid email address.");
      return;
    }
    setIsSubmitting(true);
    try {
      await Waitlist.create({ email, name });
      toast.success("You're on the waitlist! We'll be in touch soon.");
      setEmail('');
      setName('');
    } catch (error) {
      console.error("Waitlist submission failed:", error);
      toast.error("Something went wrong. Please try again.");
    }
    setIsSubmitting(false);
  };

  return (
    <div className="bg-slate-950 text-white min-h-screen">
      <Toaster richColors theme="dark" />
      <div className="absolute top-0 left-0 w-full h-full bg-grid-slate-800/[0.2] [mask-image:linear-gradient(to_bottom,white_20%,transparent_100%)]"></div>
      
      {/* Header */}
      <header className="relative z-10 p-6 flex justify-between items-center">
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
            <Code2 className="w-5 h-5 text-white" />
          </div>
          <span className="font-bold text-xl">CodedSwitch</span>
        </div>
        <Button asChild variant="ghost">
          <Link to={createPageUrl("Dashboard")}>Enter App</Link>
        </Button>
      </header>

      <main className="relative z-10 container mx-auto px-6 py-20 text-center">
        {/* Hero Section */}
        <div className="max-w-4xl mx-auto">
          <h1 className="text-5xl md:text-7xl font-bold bg-clip-text text-transparent bg-gradient-to-b from-white to-slate-400 pb-4">
            The AI-Powered Bridge Between Code and Music
          </h1>
          <p className="text-lg md:text-xl text-slate-300 mt-4 max-w-2xl mx-auto">
            A unified suite where developers and music producers can translate, compose, analyze, and create with next-generation AI support.
          </p>
          <div className="mt-8 flex justify-center gap-4">
            <Button asChild size="lg" className="bg-indigo-600 hover:bg-indigo-700">
              <Link to={createPageUrl("Dashboard")}>
                Get Started <ArrowRight className="w-4 h-4 ml-2" />
              </Link>
            </Button>
            <Button asChild size="lg" variant="outline" className="border-slate-700 hover:bg-slate-800">
              <Link to={createPageUrl("Studio")}>Try Music Studio</Link>
            </Button>
          </div>
        </div>

        {/* Features Section */}
        <div className="mt-32">
          <h2 className="text-3xl font-bold text-white">One Suite, Infinite Possibilities</h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mt-12 text-left">
            <FeatureCard
              icon={Code2}
              title="Code Translation"
              description="Instantly convert code between 14+ languages. Understand logic with AI-powered explanations and syntax highlighting."
            />
            <FeatureCard
              icon={Music}
              title="Pro Music Studio"
              description="A professional-grade DAW with MIDI sequencing, a beat maker, and a powerful piano roll editor for composing melodies."
            />
            <FeatureCard
              icon={Shield}
              title="Security Scanner"
              description="Analyze your code for vulnerabilities with our AI security expert. Get detailed reports with severity tags and fixes."
            />
            <FeatureCard
              icon={Zap}
              title="AI Assistant"
              description="Your creative partner. Switch between Grok, Gemini, and OpenAI to get help with code, music theory, or lyrics."
            />
            <FeatureCard
              icon={GitBranch}
              title="Code â†” Music"
              description="Translate code structures into musical patterns and convert melodies back into formatted code snippets. A new dimension of creativity."
            />
            <FeatureCard
              icon={Waves}
              title="Song Analysis"
              description="Upload any audio file and let our AI analyze its tempo, key, structure, and instrumentation to inspire your next project."
            />
          </div>
        </div>

        {/* Waitlist Section */}
        <div className="mt-32 max-w-2xl mx-auto">
          <h2 className="text-3xl font-bold text-white">Join the Revolution</h2>
          <p className="text-slate-400 mt-4">Sign up for the waitlist to get early access and exclusive updates on new features.</p>
          <form onSubmit={handleWaitlistSubmit} className="mt-8 flex flex-col md:flex-row gap-4">
            <Input
              type="text"
              placeholder="Your Name (optional)"
              className="bg-slate-800 border-slate-700 text-white"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
            <Input
              type="email"
              placeholder="your@email.com"
              className="bg-slate-800 border-slate-700 text-white"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
            <Button type="submit" className="bg-indigo-600 hover:bg-indigo-700" disabled={isSubmitting}>
              {isSubmitting ? 'Joining...' : 'Join Waitlist'}
            </Button>
          </form>
        </div>

        {/* Final CTA */}
        <div className="mt-32">
          <h2 className="text-4xl font-bold text-white">Ready to Create?</h2>
          <Button asChild size="lg" className="bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 mt-8 px-12 py-6 text-lg">
            <Link to={createPageUrl("Dashboard")}>Start Building & Composing</Link>
          </Button>
        </div>
      </main>
    </div>
  );
}