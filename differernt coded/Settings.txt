import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { 
  Settings as SettingsIcon, 
  User, 
  Volume2, 
  Palette, 
  Shield, 
  Bell,
  Save,
  RefreshCw
} from "lucide-react";

export default function Settings() {
  const [settings, setSettings] = useState({
    // Audio Settings
    sampleRate: '48000',
    bufferSize: '512',
    audioDevice: 'default',
    masterVolume: 75,
    
    // UI Settings
    theme: 'dark',
    colorScheme: 'purple',
    animationsEnabled: true,
    compactMode: false,
    
    // Studio Settings
    defaultBPM: 120,
    defaultKey: 'C',
    autoSave: true,
    quantization: '1/16',
    
    // AI Settings
    defaultProvider: 'gpt4',
    contextAwareness: true,
    
    // Security Settings
    autoSecurityScan: true,
    strictMode: false,
    
    // Notifications
    emailNotifications: true,
    pushNotifications: false,
    soundNotifications: true
  });

  const [isSaving, setIsSaving] = useState(false);

  const updateSetting = (key, value) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  const saveSettings = async () => {
    setIsSaving(true);
    // Simulate save delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    setIsSaving(false);
  };

  return (
    <div className="p-6 space-y-8 max-w-4xl mx-auto">
      <style>
        {`
          .settings-card {
            background: rgba(15, 23, 42, 0.6);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(99, 102, 241, 0.2);
          }
        `}
      </style>

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">Settings</h1>
          <p className="text-slate-400">Configure your CodedSwitch experience</p>
        </div>
        <Button onClick={saveSettings} disabled={isSaving} className="bg-indigo-600 hover:bg-indigo-700">
          {isSaving ? (
            <>
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              Saving...
            </>
          ) : (
            <>
              <Save className="w-4 h-4 mr-2" />
              Save Settings
            </>
          )}
        </Button>
      </div>

      {/* Audio Settings */}
      <Card className="settings-card">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Volume2 className="w-5 h-5" />
            Audio Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Sample Rate</label>
              <Select value={settings.sampleRate} onValueChange={(value) => updateSetting('sampleRate', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="44100">44.1 kHz</SelectItem>
                  <SelectItem value="48000">48 kHz</SelectItem>
                  <SelectItem value="96000">96 kHz</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Buffer Size</label>
              <Select value={settings.bufferSize} onValueChange={(value) => updateSetting('bufferSize', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="128">128 samples (2.9ms)</SelectItem>
                  <SelectItem value="256">256 samples (5.8ms)</SelectItem>
                  <SelectItem value="512">512 samples (11.6ms)</SelectItem>
                  <SelectItem value="1024">1024 samples (23.2ms)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Audio Device</label>
              <Select value={settings.audioDevice} onValueChange={(value) => updateSetting('audioDevice', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="default">Default Audio Device</SelectItem>
                  <SelectItem value="focusrite">Focusrite Scarlett 2i2</SelectItem>
                  <SelectItem value="presonus">PreSonus AudioBox USB 96</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Master Volume: {settings.masterVolume}%</label>
              <input 
                type="range"
                min="0"
                max="100"
                value={settings.masterVolume}
                onChange={(e) => updateSetting('masterVolume', parseInt(e.target.value))}
                className="w-full accent-indigo-500"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Studio Settings */}
      <Card className="settings-card">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <SettingsIcon className="w-5 h-5" />
            Studio Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Default BPM</label>
              <Input
                type="number"
                min="60"
                max="200"
                value={settings.defaultBPM}
                onChange={(e) => updateSetting('defaultBPM', parseInt(e.target.value))}
                className="bg-slate-800 border-slate-600 text-white"
              />
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Default Key</label>
              <Select value={settings.defaultKey} onValueChange={(value) => updateSetting('defaultKey', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'].map(key => (
                    <SelectItem key={key} value={key}>{key}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Quantization</label>
              <Select value={settings.quantization} onValueChange={(value) => updateSetting('quantization', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1/4">1/4 Note</SelectItem>
                  <SelectItem value="1/8">1/8 Note</SelectItem>
                  <SelectItem value="1/16">1/16 Note</SelectItem>
                  <SelectItem value="1/32">1/32 Note</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Auto-save Projects</label>
              <Switch
                checked={settings.autoSave}
                onCheckedChange={(checked) => updateSetting('autoSave', checked)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* UI Settings */}
      <Card className="settings-card">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Palette className="w-5 h-5" />
            Interface Settings
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Theme</label>
              <Select value={settings.theme} onValueChange={(value) => updateSetting('theme', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="dark">Dark</SelectItem>
                  <SelectItem value="light">Light</SelectItem>
                  <SelectItem value="auto">Auto</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Color Scheme</label>
              <Select value={settings.colorScheme} onValueChange={(value) => updateSetting('colorScheme', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="purple">Purple & Blue</SelectItem>
                  <SelectItem value="green">Green & Teal</SelectItem>
                  <SelectItem value="orange">Orange & Red</SelectItem>
                  <SelectItem value="mono">Monochrome</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Enable Animations</label>
              <Switch
                checked={settings.animationsEnabled}
                onCheckedChange={(checked) => updateSetting('animationsEnabled', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Compact Mode</label>
              <Switch
                checked={settings.compactMode}
                onCheckedChange={(checked) => updateSetting('compactMode', checked)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* AI & Security Settings */}
      <div className="grid md:grid-cols-2 gap-6">
        <Card className="settings-card">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <User className="w-5 h-5" />
              AI Assistant
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-slate-300">Default AI Provider</label>
              <Select value={settings.defaultProvider} onValueChange={(value) => updateSetting('defaultProvider', value)}>
                <SelectTrigger className="bg-slate-800 border-slate-600">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="gpt4">OpenAI GPT-4</SelectItem>
                  <SelectItem value="claude">Anthropic Claude</SelectItem>
                  <SelectItem value="gemini">Google Gemini</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Context Awareness</label>
              <Switch
                checked={settings.contextAwareness}
                onCheckedChange={(checked) => updateSetting('contextAwareness', checked)}
              />
            </div>
          </CardContent>
        </Card>

        <Card className="settings-card">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Shield className="w-5 h-5" />
              Security
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Auto Security Scan</label>
              <Switch
                checked={settings.autoSecurityScan}
                onCheckedChange={(checked) => updateSetting('autoSecurityScan', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Strict Mode</label>
              <Switch
                checked={settings.strictMode}
                onCheckedChange={(checked) => updateSetting('strictMode', checked)}
              />
            </div>

            <div className="pt-2">
              <Badge variant="outline" className="border-yellow-500/30 text-yellow-400 bg-yellow-500/10">
                <Shield className="w-3 h-3 mr-1" />
                Enhanced protection enabled
              </Badge>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Notifications */}
      <Card className="settings-card">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <Bell className="w-5 h-5" />
            Notifications
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid md:grid-cols-3 gap-6">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Email Notifications</label>
              <Switch
                checked={settings.emailNotifications}
                onCheckedChange={(checked) => updateSetting('emailNotifications', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Push Notifications</label>
              <Switch
                checked={settings.pushNotifications}
                onCheckedChange={(checked) => updateSetting('pushNotifications', checked)}
              />
            </div>

            <div className="flex items-center justify-between">
              <label className="text-sm font-medium text-slate-300">Sound Notifications</label>
              <Switch
                checked={settings.soundNotifications}
                onCheckedChange={(checked) => updateSetting('soundNotifications', checked)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Save Button */}
      <div className="flex justify-center pt-6">
        <Button onClick={saveSettings} disabled={isSaving} size="lg" className="bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 px-12">
          {isSaving ? (
            <>
              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
              Saving Settings...
            </>
          ) : (
            <>
              <Save className="w-4 h-4 mr-2" />
              Save All Settings
            </>
          )}
        </Button>
      </div>
    </div>
  );
}